package com.example.vulnerabilities.model;

import com.example.vulnerabilities.model.version.VersionConstraint;
import jakarta.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

public class SecurityVulnerability {

    final String name;
    final String severity;
    @Nullable
    final String firstPatchedVersion;
    final List<VersionConstraint> versionConstraints;

    public SecurityVulnerability(String severity,
                                 String name,
                                 String vulnerableVersionRange,
                                 @Nullable String firstPatchedVersion) {
        this.name = name;
        this.severity = severity;
        this.firstPatchedVersion = firstPatchedVersion;
        this.versionConstraints = parseVersionConstraint(vulnerableVersionRange);
    }

    public String getSeverity() {
        return severity;
    }

    @Nullable
    public String getFirstPatchedVersion() {
        return firstPatchedVersion;
    }

    /**
     * Compare versions by constraints
     * check if version number is within this.versionConstraints
     * @param version version to compare
     * @return is received version consider as vulnerable
     */
    public boolean isVersionVulnerable(String version) {
        // Check for each constraint
        for (VersionConstraint constraint : versionConstraints) {
            if (!constraint.isSatisfiedBy(version)) {
                return false;
            }
        }

        return true;
    }

    /**
     * Parse version constraints to list of VersionConstraint
     * @param range range from received data - vulnerableVersionRange=>= 5.0.0-alpha.1, < 5.0.0
     * @return list of version constraints
     */
    private List<VersionConstraint> parseVersionConstraint(String range) {
        List<VersionConstraint> versionConstraints = new ArrayList<>();
        // Split ranges to tokens via "," - [>= 5.0.0-alpha.1],[ < 5.0.0]
        String[] ranges = range.split(",");

        for (String currRange : ranges) {
            versionConstraints.add(VersionConstraint.parse(currRange));
        }

        return versionConstraints;
    }

}
